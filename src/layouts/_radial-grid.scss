// Import Sass variables from utility module
@use '../settings/sass-variables' as *;

/*  
 ====== Radial Grid =======
 Next the structure of a radial grid,
 specifying interactions between elements such as pod, orbits, orbiters, sectors, and SVG.
 It also manages the behavior of these elements when properties change, like sizes, arc-length limits, and alignment. 
*/
/* ====== Radial Grid - Core ======== */
.core >.orbiter:only-child {
  transform: translate(-50%, -50%);
}


/* ====== Radial Grid - Orbit ======== */

/* 
 Set diameter and z-index variables for each orbit
 having into account due orbit is nestable --o-diameter is affected by 
 parent orbiter size.
*/
@for $i from $min-orbits through $max-orbits {
  $z-index: #{$max-orbits - $i};
  
  
   @each $orbit-size, $orbit-value in $orbit-sizes {
    
    .container > :nth-child(#{$i} of .orbit#{$orbit-size}) {
      @if $orbit-size != null {
        
        --o-diameter: #{$orbit-value};
      }  @else {
        --o-diameter: calc(var(--o-radius-#{$i}) * 2);
      }
      --o-z-index: #{$z-index};
      
    }
  }

 
 // @each $size, $var in $sizes {
    .orbiter > :nth-child(#{$i} of .orbit) {
    //  @if $size == null {
     //   --o-diameter: calc(var(--o-m) * #{$i});
     // } @else {
        --o-diameter: calc(var(--o-size) * #{$i});
     // }
      --o-z-index: #{$z-index};
   // }
  }

  @each $orbit-size, $orbit-value in $orbit-sizes {
    
    .orbiter > :nth-child(#{$i} of .orbit#{$orbit-size}) {
      @if $orbit-size != null {
        
        --o-diameter: #{$orbit-value};
      }  @else {
        --o-diameter: calc(var(--o-size) * #{$i});
      }
      --o-z-index: #{$z-index};
      
    }
  }

}

/* ====== Radial Grid - Sub-orbit ======== */

/* 
 Set diameter and z-index variables for each suborbit.
*/
@for $i from $min-orbits through $max-orbits {
  $z-index: #{$max-orbits - $i};
  
  
  @each $orbit-size, $orbit-value in $orbit-sizes {
  
  .container > :nth-child(#{$i} of .orbit#{$orbit-size}) > .orbit {
    @if $orbit-size != null {
      --o-diameter: #{$orbit-value};
      --o-x-coords: calc( #{$orbit-value} / 2);
    } @else {
      --o-diameter: calc(var(--o-radius-#{$i}) * 2);
    --o-x-coords: calc(var(--o-radius-#{$i}));
    }

    --o-z-index: #{$z-index};
    border: none;
    
  }
}

  
  @each $orbit-size, $orbit-value in $orbit-sizes {
  .container > :nth-child(#{$i} of .orbit#{$orbit-size}) > .orbit > .sector {
    @if $orbit-size != null {
      --o-diameter: #{$orbit-value};
      } @else {
        --o-diameter: calc(var(--o-radius-#{$i}) * 2);
      }
    
    --o-current-orbit: #{$i};
    --o-max-orbits: #{$max-orbits};
  }
  }
 

  
 @each $orbit-size, $orbit-value in $orbit-sizes {
    
    .container > :nth-child(#{$i} of .orbit#{$orbit-size}) > .sector{
      @if $orbit-size != null {
      --o-diameter: #{$orbit-value};
      } @else {
        --o-diameter: calc(var(--o-radius-#{$i}) * 2);
      }
      
    }
  }
  @each $orbit-size, $orbit-value in $orbit-sizes {
    
    @each $class in $align {
      $math: '';
  
    @if $class == '.upper' {
      $math: '+ (calc(var(--o-size) / 2))';
    }
    @if $class == '.lower' {
      $math: '- (calc(var(--o-size) / 2))';
    }

    .container > :nth-child(#{$i} of .orbit#{$orbit-size}) > .orbiter#{$class} {
      @if $orbit-size != null {
      --o-x-coords:  calc( #{$orbit-value} / 2 #{$math});
      }
  }
}
}
  
    .orbiter > .orbit:nth-child(#{$i}) > .orbit {
      --o-diameter: calc(var(--o-size) * #{$i});
      --o-z-index: #{$z-index};
      --o-x-coords: calc(var(--o-radius-#{$i}));
      border: none !important;
    }

    .orbiter > .orbit:nth-child(#{$i}) > .orbit > .sector {
        --o-diameter: calc(var(--o-size) * #{$i});
        --o-width: calc(var(--o-size) / 4);
        --o-current-orbit: #{$i};
        --o-max-orbits: #{$max-orbits};
    }
 
}

/* Set different offset angles.
 This allows orbit child elements to start at different points, overriding the default 0ยบ.
 $offsets are defined in ./base/_variables.scss.
 For example, .offset-45 implies that orbiters or sectors start at a 45ยบ angle.
*/
@each $offset, $angle in $offsets {
    .orbit#{$offset}, .core#{$offset} {
    --o-offset-angle: #{$angle}; /* Set --o-offset-angle variable for a specific offset */
  }
}

@each $limit, $angle in $limits {
  .orbit#{$limit}, .core#{$limit} {
    --o-arc: #{$angle}; /* Set lengyh variable for a specific arc limit */
  }
}



/* Counter-clockwise direction
 By default, orbit child elements are arranged clockwise.
 Use this class to change this behavior.
*/
.orbit.ccw {
  --o-direction: -1; /* Set --o-direction variable to -1 for counter-clockwise direction */
}

/* ====== Radial Grid - Orbiters ======== */

/* Set size variable for each orbiter */
@each $size, $var in $sizes {
  .orbiter#{$size} {
    @if $size != null {
      --o-size: #{$var};
    }    
  }
}

/* Calculate and set arc-length and angle for each orbiter based on arc limits.
 Angle is calculated taking into account arc-length, number of orbit child elements and direction
 Note: using :nth-child() selector avoid to use parent classes to define number of child elements,
 but is not yet handled by Firefox, unless layout.css.has-selector.enabled flag  https://caniuse.com/css-has
*/
@for $i from $min-orbiters through $max-orbiters {
  .orbit:has(> .orbiter:nth-child(#{$i})) {
    $number: $i - 1;
    @if $i < 1  {
      $number: 1;
    }
    --o-angle: calc((var(--o-arc) / #{$number}) * var(--o-direction)); 
    }
}
@for $i from $min-orbiters through $max-orbiters {
    .orbit:not([class*=" limit-"]):has(> :nth-child(#{$i} of .orbiter)) {
      $number: $i;
      @if $i < 1  {
        $number: 1;
      }
      --o-angle: calc((var(--o-arc) / #{$number}) * var(--o-direction)); 
      }
}

@for $i from $min-orbiters through $max-orbiters {
  .orbit[class*=" limit-"]:has(> .orbiter:nth-child(#{$i})) {
    $number: $i - 1;
    @if $i < 1  {
      $number: 1;
    }
    --o-angle: calc((var(--o-arc) / #{$number}) * var(--o-direction)); 
    }
}

/* Set orbiter-number variable for each orbiter in each orbit */
@for $i from $min-orbiters through $max-orbiters {
  .orbiter:nth-child(#{$i}) {
    --o-orbiter-number: #{$i};
  }
}

/* Set x custom var for each orbiter
 This value is used to calculate its radius.
 Aligment options ares included.
*/
@for $i from $min-orbits through $max-orbits {
 
   
    @each $class in $align {
      $math: '';
   
    @if $class == '.upper' {
      $math: '+ (calc(var(--o-size) / 2))';
    }

    
    @if $class == '.lower' {
      $math: '- (calc(var(--o-size) / 2))';
    }

    
    .container >  :nth-child(#{$i} of .orbit) > .orbiter#{$class} {
      --o-x-coords: calc(var(--o-radius-#{$i}) #{$math});
    }
 
  }
}

/* Set variables for each orbiter in each orbit based on size and alignment
 Accordng its diameter named sizes each orbiter has a radius to be elingned with its orbit.
 By deafult orbiter are aligned in the middle of it orbit, but it is possible
 to place it tangencialy upper or lower.
 Example: orbiter.upper
*/
@for $i from $min-orbits through $max-orbits {
 
    @each $class in $align {
    
    $math: '';
    @if $class == '.upper' {
      $math: '+ (calc(var(--o-size) / 2))';
    }

    @if $class == '.lower' {
      $math: '- (calc(var(--o-size) / 2))';
    }

    
    .orbiter > .orbit:nth-child(#{$i}) > .orbiter#{$class}, .orbit > .orbit:nth-child(#{$i}) > .orbiter#{$class} {
        --o-x-coords: calc((var(--o-diameter) / 2) #{$math});
    }
  }
}

/* ========= Radial Grid - Sectors ============= */

/* Set orbiter-number variable for each sector in each orbit */
@for $i from $min-orbiters through $max-orbiters {
  .sector:nth-child(#{$i}) {
    --o-orbiter-number: #{$i};
  }
}

/* Calculate and set angle for each orbiter and sector.
 Angle is calculated taking into account arc-length, number of orbit child elements and direction
 Note: using :nth-child() selector avoid to use parent classes to define number of child elements,
 but is not yet handled by Firefox, unless layout.css.has-selector.enabled flag  https://caniuse.com/css-has
*/
@for $i from $min-orbiters through $max-orbiters {
  .orbit:has(> .sector:nth-child(#{$i})) {
    --o-angle: calc((var(--o-arc) / #{$i}) * var(--o-direction)); 
  }
}


@for $i from $min-orbits through $max-orbits {
  
  .container >  :nth-child(#{$i} of .orbit) > .sector {
    --o-diameter: calc(var(--o-radius-#{$i}) * 2);
    --o-current-orbit: #{$i};
    --o-max-orbits: #{$max-orbits};
  }

  
    .orbiter >  :nth-child(#{$i} of .orbit) > .sector {
      --o-diameter: calc(var(--o-size) * #{$i});
      --o-width: calc(var(--o-size) / 4);
      --o-current-orbit: #{$i};
      --o-max-orbits: #{$max-orbits};
    }
}

/* ========= Radial Grid - SVG ============= */

@for $i from $min-orbits through $max-orbits {
  
  .container > :nth-child(#{$i} of .orbit) > svg {
    --o-diameter: calc(var(--o-radius-#{$i}) * 2);
  }
}

/* Set variables for each orbiter in each orbit based on size and alignment
 Accordng its diameter named sizes each orbiter has a radius to be elingned with its orbit.
 By deafult orbiter are aligned in the middle of it orbit, but it is possible
 to place it tangencialy upper or lower.
 Example: orbiter.upper
*/
@for $i from $min-orbits through $max-orbits {

    
    .orbiter > :nth-child(#{$i} of .orbit) > svg {
      
        --o-diameter: calc(var(--o-size) * #{$i});
     
      
    }
}
