
@use './variables' as *;

/* Orbit radial layout 
This is the core of Orbit library. It offers a clean and simple way to design radial apps using just css.

.orbit and .orbit-* have --orbit-nth to individualize it place according max-orbits (ex. orbit-4 has --orbit-nth: 4). The same happens with other elements such as satellites, vectors, and sectors that use --o-position to be individualized.

.orbit and .orbit-* hold an unique --o-angle calculated by counting their childs. This allows to perform
some calcs to distributed such elements along an orbit.

The mechanism is very simple: 
--orbit-nth gives a radius that informs where the radius of each orbit accordint both the orbital-zone lenght and max number of orbits. For instante, With a orbital-zone lenght of 500px and a maximun of 12 orbits, orbit-4 will have 166.66 pixels of radius. 

According number of satellites in an orbit, a --o-angle is calculated (if orbit has 3 satellites, --o-angle is 120deg). Finally, --o-angle is multiplied by --o-positions (in the example satellite one will have 120deg, satellite two 240deg, and satellite three 360deg and each satellite will be placed along its orbit at 166.66px)

There are some modifiers to adjust orbit child distribution:

--o-range. This variable allows user to set an arbitrary arc lenght. Values can go from 0 to 360deg. For
convinience exist range-* utility (.range-0 to .range-360)

--o-begin-at. This variable allows user to set an arbitrary starting point. Values can go from 0 to 360deg. For convinience exist begin-at-* utility (.begin-at-0 to .begin-at-360)

*/

/* Orbits layout */
.orbit-0 {
  --orbit-nth: 0;
  border: 1px solid red;
}
@for $i from 1 through $max-orbits {
    :nth-child(#{$i} of .orbit), .orbit-#{$i} {
    --orbit-nth: #{$i};
    }
}

/* Satellites, sectors and vectors layout */

@for $i from 1 through $max-orbiters {
    :nth-child(#{$i} of .satellite), :nth-child(#{$i} of o-sector), :nth-child(#{$i} of .vector) {
    --o-position: #{$i};
    }
}

@for $i from 1 through $max-orbiters {
    .orbit:has(> :nth-child(#{$i} of .satellite), > :nth-child(#{$i} of o-sector), > :nth-child(#{$i} of .vector)),
    [class*='orbit-']:has(> :nth-child(#{$i} of .satellite), > :nth-child(#{$i} of o-sector), > :nth-child(#{$i} of .vector)) {
    --o-angle: calc(var(--o-range) / #{$i});
    }
}
