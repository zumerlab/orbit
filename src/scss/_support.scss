@use './variables'  as *;

/*!

## Orbit support and compliance checks

Orbit provides a comprehensive set of rules and visual aids in CSS to assist developers in enhancing user experience. These guidelines ensure adherence to best practices and optimize the utilization of Orbit's features.

### Checking browser support for `has()` CSS Rule

Before implementing features reliant on the `has()` CSS rule, it's essential to confirm browser compatibility. Orbit includes checks to verify support for this rule, alerting developers if it's unavailable in the targeted browser environment.

### Checking browser support for `context-stroke`

Some browsers doesn't support `context-stroke` which is used to add some fancy ending markers in `o-sector` and `o-progress`. Orbit will alert this porblem and offer a quick-fix.

### Usage Limitation of `o-sector`, `o-label`, and `o-progress`

For optimal functionality, `o-sector`, `o-label`, and `o-progress` should only be applied within circular orbits. As Orbit currently doesn't support elliptical shapes, these web-components will be hidden if detected within incompatible orbit shapes.

### Visual Warning for Invalid Nested Elements

Orbit incorporates visual cues to identify and warn developers of invalid nested elements within orbit structures:

- **Invalid Child Elements within `.orbit-zone`:** Orbit detects and notifies developers if `.orbit-zone` contains invalid direct child elements. Only `.orbit` or `.orbit-*` elements are permissible within `.orbit-zone`.

- **Invalid Child Elements within `.satellite`:** Similarly, Orbit checks for and alerts developers if `.satellite` includes invalid direct child elements. Only `.orbit-zone` elements are permitted within `.satellite`.


*/
/* Check Firefox has() support */
@supports not selector(:has(a)) {	
  .orbit-zone {
    border: 3px dotted red!important;
  }
  .orbit-zone>* {
    display: none;
  }

  .orbit-zone::before {
    content: 'Update  ü¶ä Firefox to use Orbit';
   // text-shadow: 0 0 2px red;
    font-size: 18px;
   // background-color: yellow;
    padding: 10px;
    text-align: center;
  }


}

@supports  not (fill: 'context-stroke') {
  .orbit-zone {
    border: 3px dotted red!important;
    color: white;
  }
  .orbit-zone * {
    //display: none !important;
    opacity: 0.4 !important;
  }

  .orbit-zone::after {
    content: "This browser doesn't support 'context-fill' markers. Set attr 'shape' to 'none'";
    opacity: 1 !important;
   // text-shadow: 0 0 2px red;
    font-size: 18px;
   // background-color: yellow;
    padding: 10px;
    text-align: center;
  }
}



@container osector not style(--o-ellipse-x: 1) {
  /* Shown if ratio equals 1*/
  o-sector, o-progress, o-label {
    display: none;
  }
}
@container osector not style(--o-ellipse-y: 1) {
  /* Shown if ratio equals 1*/
  o-sector, o-progress, o-label {
    display: none;
  }
}


/* orbit-zone checks */
.orbit-zone:has(>*:not(.orbit, [class*='orbit-'])) {
  border: 3px dotted red!important;
}
.orbit-zone:has(>*:not(.orbit, [class*='orbit-'])) > * {
  filter:grayscale(1) opacity(0.2)
}
.orbit-zone:has(> *:not(.orbit, [class*='orbit-']))::after {
  content: "‚ö†Ô∏è";
  font-size: 130%;
  animation:  pulse 1.5s infinite;
  z-index: 99;
  filter: drop-shadow(3px 3px 8px rgb(255, 254, 254));
  position: absolute;
}

/* orbit and satellite checks */
.orbit:has(>*:is(.orbit, [class*='orbit-'])), 
[class*='orbit-']:not(.orbit-zone):has(>*:is(.orbit, [class*='orbit-'])),
.satellite:has(>*:not(.orbit-zone, .capsule)) {
 border: 2px dotted rgb(255, 81, 0)!important;
}
.orbit:has(>*:is(.orbit, [class*='orbit-']))> *, 
[class*='orbit-']:not(.orbit-zone):has(>*:is(.orbit, [class*='orbit-']))> *,
.satellite:has(>*:not(.orbit-zone, .capsule)) > * {
  opacity: 0.4
}
.orbit:has(>*:is(.orbit, [class*='orbit-']))::after, 
[class*='orbit-']:not(.orbit-zone):has(>*:is(.orbit, [class*='orbit-']))::after, 
.satellite:has(>*:not(.orbit-zone, .capsule))::after {
  content: "‚ö†Ô∏è";
  animation:  pulse 1.5s infinite;
  z-index: 999;
  filter: drop-shadow(1px 1px 8px rgb(255, 254, 254));
  position: absolute;
}



@keyframes pulse {
  0% {
    transform: scale(1);
    opacity: 0;
  }
  50% {
    opacity: 1;
    transform: scale(1.2);
  }
  100% {
    transform: scale(1);
    opacity: 0;
  }
}
