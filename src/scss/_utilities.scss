@use './variables' as *;


/* .gravity-spot  aligment utilities */
.at-top-left {
  align-items: flex-start !important;
  justify-content: flex-start !important;
}
.at-top {
  align-items: flex-start !important;
  justify-content: center !important;
}
.at-top-right {
  align-items: flex-start !important;
  justify-content: flex-end !important;
}
.at-bottom-left {
  align-items: flex-end !important;
  justify-content: flex-start !important;
}
.at-bottom {
  align-items: flex-end !important;
  justify-content: center !important;
}
.at-bottom-right {
  align-items: flex-end !important;
  justify-content: flex-end !important;
}
.at-center-left {
  align-items: center !important;
  justify-content: flex-start !important;
}
.at-center {
  align-items: center !important;
  justify-content: center !important;
}
.at-center-right {
  align-items: center !important;
  justify-content: flex-end !important;
}
/* 
  initial orbit ratio class 
*/
@for $i from 1 through $max-orbits {
  .gravity-spot.from-#{$i}x {
  --o-initial-orbit: #{$i};
  }
}
/* 
  Range, begin-at and angle classes utilities 
*/
$max-grade: 360;
@for $i from 0 through $max-grade {
  .range-#{$i} {
    --o-range: #{$i}deg;
  }
}
@for $i from 0 through $max-grade {
  .from-#{$i} {
    --o-from: #{$i}deg;
  }
}
@for $i from 0 through $max-grade {
  .angle-#{$i} {
    --o-angle-composite: calc(#{$i}deg - 90deg) !important; 
  }
}

/* 
  Sector, Progress and Vector utilities 
*/ 

/* 
  Sector gap 
*/ 

$max-gaps: calc($max-orbiters / 2);
@for $i from 1 through  $max-gaps {
  o-slice.gap-#{$i}, o-text.gap-#{$i} {
    --o-gap: #{$i};
  }
}

/* 
Sector, Progress and Vector size-ratio
Can be used in parent elements or in each orbiter class
*/ 
@for $i from 1 through  9  {
  $percent: calc($i * 10);
  $value: calc($i / 10);
  .orbit.shrink-#{$percent}, [class*='orbit-'].shrink-#{$percent} {
    --o-orbit-ratio: #{$value}; 
  }
}

@for $i from 1 through  9  {
  $percent: calc($i * 10);
  $value: calc(1 - $i / 10);
  .shrink-#{$percent} {
    --o-size-ratio: #{$value} !important; 
  }
}

@for $f from 1 through  9  {
  $percent: calc($f);
  $value: calc($f / 10);
.grow-0\.#{$percent}x {
  --o-size-ratio: #{calc(1 + $value)} !important; 
}
}
@for $i from 1 through $max-orbits {
  .grow-#{$i}x {
    --o-size-ratio: #{calc($i * 2)} !important;
  }

  @for $f from 1 through  9  {
    $percent: calc($f);
    $value: calc($f / 10);
  .grow-#{$i}\.#{$percent}x {
    --o-size-ratio: #{calc($i * 2 + $value)} !important; 
  }
}

}

/* 
  Orbit child elements could be placed at low / middle / high-orbit
*/ 
.inner-orbit {
  --o-aligment: calc(
    var(--o-radius) / var(--o-orbit-number, 1) * var(--o-size-ratio, 1)
  ) / 2;
}
.quarter-inner-orbit {
  --o-aligment: calc(
    var(--o-radius) / var(--o-orbit-number, 1) * var(--o-size-ratio, 1)
  ) / 3.75;
}
.quarter-outer-orbit {
  --o-aligment: calc(
    var(--o-radius) / var(--o-orbit-number, 1) * var(--o-size-ratio, 1)
  ) / -3.75;
}

.outer-orbit {
  --o-aligment: calc(
    var(--o-radius) / var(--o-orbit-number, 1) * var(--o-size-ratio, 1)
  ) / -2;
}

/* 
  Orbit direction
*/ 

.ccw{
  --o-direction: -1 !important;
  --o-offset: - -90deg !important;
}

/* 
  Orbit range justification
*/ 

.fit-range {
  --o-fit-range: 1 !important;
}


/* 
  Orbit capsule
*/ 


.capsule.flip {
  --o-angle-composite: 180deg !important;
}

.capsule.turn-left {
  margin-top: 25%;
  --o-angle-composite: 90deg !important;
}
.capsule.turn-right  {
  margin-top: 25%;
  --o-angle-composite: 270deg !important;
}

.capsule.stable  {
  --o-gyro: calc(90deg - ( var(--o-angle) * var(--o-orbit-child-number)));
  --o-angle-composite: var(--o-gyro);
}

.satellite>.capsule.stable  {
  --o-gyro: calc(var(--o-angle) * var(--o-orbit-child-number));
}

.satellite>.capsule.turn-left {
  margin-top:unset;
}
.satellite>.capsule.turn-right  {
  margin-top:unset;
}

/*  Satellite  gyro */
.satellite.sync-rotation {
  transform: var(--o-transform) rotate(calc(var(--o-angle-composite)));
}

o-progress.rounded,o-text.rounded {
  --o-linecap: round;
}

.gooey-fx-light, .gooey-fx{
  filter: url('data:image/svg+xml,\
  <svg xmlns="http://www.w3.org/2000/svg">\
  <filter id="fancy-goo">\
  <feGaussianBlur in="SourceGraphic" stdDeviation="2" result="blur" />\
  <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 19 -9" result="goo" />\
  <feComposite in="SourceGraphic" in2="goo" operator="atop" />\
  </filter>\
  </svg>#fancy-goo')
}

.gooey-fx-medium{
  filter: url('data:image/svg+xml,\
  <svg xmlns="http://www.w3.org/2000/svg">\
  <filter id="fancy-goo">\
  <feGaussianBlur in="SourceGraphic" stdDeviation="5" result="blur" />\
  <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 19 -9" result="goo" />\
  <feComposite in="SourceGraphic" in2="goo" operator="atop" />\
  </filter>\
  </svg>#fancy-goo')
}

.gooey-fx-max{
  filter: url('data:image/svg+xml,\
  <svg xmlns="http://www.w3.org/2000/svg">\
  <filter id="fancy-goo">\
  <feGaussianBlur in="SourceGraphic" stdDeviation="9" result="blur" />\
  <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 19 -9" result="goo" />\
  <feComposite in="SourceGraphic" in2="goo" operator="atop" />\
  </filter>\
  </svg>#fancy-goo');
}
