@use './variables' as *;
/*!
## Orbit utilities 

There is a small set of CSS utilities to use with some orbit classes and componentes:

  - **.orbital-zone aligment utilities**
    - `.center`, `center-left`, `.center-right`, `.top-left`, `.top-center`, `.top-right`, `.bottom-left`, `.bottom-center`,  `.bottom-right`
  - **.orbit or .orbit-* child elements utilities (satellite, vector, o-sector, o-progress)**
    - `.from-*`: To set a starting angle point. From 0 - 360deg. Default 0deg.
    - `.range-*`: To set a limit to distribute elements. From 0 - 360deg. Default 360deg.
    - `.angle-*`: To set an angle point to place elements. From 0 - 360deg. (not applies to o-progress)
  - **Satellite, vector, o-sector, o-progress utilites**
    - `.grow-*x`: To increase size according number of orbits. Default 1.
    - `.reduce-*`: To decrease size according an orbit fracction percentage. Default 1.
    - `.inner-orbit`: To place element just below its orbit.
    - `.outer-orbit`: To place element just above its orbit. 
  - **satellite utilities**
    - `.circle` to render a circle shape. Default
    - `.rounded-box` to render a rounded box shape.
    - `.box` to render a box shape.
  - **o-sector utilities**
    - `.gap-*` applied on `.orbit` or `.orbit-*` or in `<o-sector>`: to set a gap space. Default '0'
  
*/

/* .orbital-zone  aligment utilities */
.orbital-zone.top-left {
  align-items: flex-start !important;
  justify-content: flex-start !important;
}
.orbital-zone.top-center {
  align-items: flex-start !important;
  justify-content: center !important;
}
.orbital-zone.top-right {
  align-items: flex-start !important;
  justify-content: flex-end !important;
}
.orbital-zone.bottom-left {
  align-items: flex-end !important;
  justify-content: flex-start !important;
}
.orbital-zone.bottom-center {
  align-items: flex-end !important;
  justify-content: center !important;
}
.orbital-zone.bottom-right {
  align-items: flex-end !important;
  justify-content: flex-end !important;
}
.orbital-zone.center-left {
  align-items: center !important;
  justify-content: flex-start !important;
}
.orbital-zone.center {
  align-items: center !important;
  justify-content: center !important;
}
.orbital-zone.center-right {
  align-items: center !important;
  justify-content: flex-end !important;
}

/* 
  Range, begin-at and angle classes utilities 
*/
$max-grade: 360;
@for $i from 0 through $max-grade {
  .range-#{$i} {
    --o-range: #{$i}deg;
  }
}
@for $i from 0 through $max-grade {
  .from-#{$i} {
    --o-from: #{$i}deg;
  }
}
@for $i from 0 through $max-grade {
  .angle-#{$i} {
    --o-angle-composite: #{$i}deg;
  }
}

/* 
  Sector, Progress and Vector utilities 
*/ 

/* 
  Sector gap 
*/ 
@for $i from 1 through $max-orbiters {
  o-sector.gap-#{$i} {
    --o-gap: #{$i};
  }
}

/* 
Sector, Progress and Vector size-ratio
Can be used in parent elements or in each orbiter class
*/ 

@for $i from 0 through  10  {
  $percent: calc($i * 10);
  $value: if($i == 0, 1, 1 - ($i / 10));
  .reduce-#{$percent} {
    --o-size-ratio: #{$value}; 
  }
}

@for $i from 1 through $max-orbits {
  .grow-#{$i}x {
    --o-size-ratio: #{$i};
  }
}

/* 
  Orbit child elements could be placed at low / middle / high-orbit
*/ 
.inner-orbit {
  --o-aligment: calc(
    var(--o-radius) / var(--orbit-nth) * var(--o-size-ratio, 1)
  ) / 2;
}
.outer-orbit {
  --o-aligment: calc(
    var(--o-radius) / var(--orbit-nth) * var(--o-size-ratio, 1)
  ) / -2;
}
