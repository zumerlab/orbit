
@use './variables' as *;

/*! 
## Orbit Radial Layout

Orbit radial layout is the core of Orbit library, offering a flexible, clean and simple way to design radial apps using just CSS.

### Overview

`.orbit` and `.orbit-*` have `--orbit-nth` to individualize their position according to the maximum number of orbits (e.g., `orbit-4` has `--orbit-nth: 4`). Similarly, other elements such as `satellites`, `vectors`, and `sectors` use `--o-position` to be individualized.

`.orbit` and `.orbit-*` hold a unique `--o-angle` calculated by counting their children. This allows for some calculations to distribute such elements along an orbit.

### Mechanism

The mechanism is straightforward:

- `--orbit-nth` gives a radius that informs where each `orbit` is placed, according to both the `.orbital-zone` length and the maximum number of orbits. For example, with an `.orbital-zone` length of 500px and a maximum of 12 orbits, `orbit-4` will have 166.66 pixels of radius.

- According to child number in an orbit, `--o-angle` is calculated (if one orbit has 3 satellites, `--o-angle` is 120deg). Finally, `--o-angle` is multiplied by `--o-positions`. For example, satellite one will have 120deg, satellite two 240deg, and satellite three 360deg, and each satellite will be placed along its orbit at 166.66px.

### Modifiers

There are some modifiers to adjust orbit child distribution:

- `--o-range`: This variable allows the user to set an arbitrary arc length. Values can range from 0 to 360deg. For convenience, there are utility classes `range-*` (.range-0 to .range-360).

- `--o-begin-at`: This variable allows the user to set an arbitrary starting point. Values can range from 0 to 360deg. For convenience, there are utility classes `begin-at-*` (.begin-at-0 to .begin-at-360).

### Usage and Examples

```html
<!-- Example usage of Orbit Radial Layout -->
<div class="orbital-zone">
    <div class="orbit-3"></div>
    <div class="orbit-4">
        <div class="satellite"></div>
        <div class="satellite"></div>
        <div class="satellite"></div>
    </div>
</div>
```

```html
<!-- Example usage of Orbit Radial Layout with custom range -->
<div class="orbit range-270">
  <o-sector>
  <o-sector>
  <o-sector>
</div>
```

```html
<!-- Example usage of Orbit Radial Layout with custom starting point -->
<div class="orbit-3 begin-at-90">
  <div class="vector"></div>
  <div class="vector"></div>
  <div class="vector"></div>
  <div class="vector"></div>
  <div class="vector"></div>
</div>
```

#### To-do

- Check `--orbit-nth` and `--o-position`
- Check behaviour when nested mix elements inside an orbit
- Add @container check
*/

/* Orbits layout */
.orbit-0 {
  --orbit-nth: 0;
  border: 1px solid red;
}
@for $i from 1 through $max-orbits {
    :nth-child(#{$i} of .orbit), .orbit-#{$i} {
    --orbit-nth: #{$i};
    }
}

/* Satellites, sectors and vectors layout */

@for $i from 1 through $max-orbiters {
    :nth-child(#{$i} of .satellite), :nth-child(#{$i} of o-sector), :nth-child(#{$i} of .vector) {
    --o-position: #{$i};
    }
}

@for $i from 1 through $max-orbiters {
    .orbit:has(> :nth-child(#{$i} of .satellite), > :nth-child(#{$i} of o-sector), > :nth-child(#{$i} of .vector)),
    [class*='orbit-']:has(> :nth-child(#{$i} of .satellite), > :nth-child(#{$i} of o-sector), > :nth-child(#{$i} of .vector)) {
    --o-angle: calc(var(--o-range) / #{$i});
    }
}
