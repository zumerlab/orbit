
@use './variables' as *;

/*! 
## Orbit radial layout

Orbit radial layout is the core of Orbit framework that offers a flexible, clean and simple way to design radial UI using just CSS and some optional vanilla web components crafted to improve dev UX.

### Overview

To create radial layouts using just CSS, it is neccesary to use CSS variables and do some maths. `.orbit` and `.orbit-*` have `--o-orbit-number` var to individualize their position according to the maximum number of orbits. Similarly, other elements such as `satellites`, `spokes`, `sectors`, and others use `--o-orbit-child-number` to be individualized.

Besides that, `.orbit` and `.orbit-*` have `--o-angle` var that counts their child elements.

### Mechanism

The mechanism is straightforward:

- `--o-orbit-number` informs where each `orbit` is placed, according to `.orbit-zone` length and maximum number of orbits. For example, with an `.orbit-zone` length of 500px and a maximum of 12 orbits, `orbit-4` will have 166.66 pixels of radius.

- `--o-angle` is calculated depending on `.orbit` children number. For example, if an orbit has 3 satellites, `--o-angle` is 120deg). Finally, `--o-angle` is multiplied by `--o-orbit-child-number`. For example, satellite one will have 120deg, satellite two 240deg, and satellite three 360deg, and each satellite will be placed along its orbit at 166.66px.

### Modifiers

There are some modifiers to adjust orbit child distribution and make radial layout more flexible:

  - Utility class `.range-*`: To define the arc lenght. Default '360deg'
  - Utility class `.from-*`: To define starting point. Default '0deg'
  - Utility class `.grow-*x`: To increase size according number of orbits. Default 1.
  - Utility class `.reduce-*`: To decrease size according an orbit fracction percentage. Default 1.
  - Utility class `.inner-orbit`: To place `.satellite` just below its orbit
  - Utility class `.outer-orbit`: To place `.satellite` just above its orbit
  - Utility class `.quarter-inner-orbit`: To place `.satellite` a 25% into its orbit.
  - Utility class `.quarter-outer-orbit`: To place `.satellite` a 25% outer its orbit.
  - Utility class `.ccw`: to invert arrange order of orbit child elements. Default clock-wise.
  - Utility class `.fit-range`: Useful when range is inferior to 360deg to cover all range.

### Layout rules

Any Orbit project should be follow this simple rules:

- Start with `.orbit-zone`.
- Add as many `.orbit`or `.orbit-*` as needed.
- Put `.satellite`, `o-sector`, `o-progress`,`o-label`,`.segment` or `.spoke` inside an `.orbit`. 
- Orbits can be nested by adding `.orbit-zone` into `.satellite`.

### Usage and Examples

```html
<!-- Example usage of Orbit Radial Layout -->
<div class="orbit-zone">
    <div class="orbit-3"></div>
    <div class="orbit-4">
        <div class="satellite"></div>
        <div class="satellite"></div>
        <div class="satellite"></div>
    </div>
</div>
```

```html
<!-- Example usage of Orbit Radial Layout with custom range -->
<div class="orbit range-270">
  <o-sector>
  <o-sector>
  <o-sector>
</div>
```

```html
<!-- Example usage of Orbit Radial Layout with custom starting point -->
<div class="orbit-3 from-90">
  <div class="spoke"></div>
  <div class="spoke"></div>
  <div class="spoke"></div>
  <div class="spoke"></div>
  <div class="spoke"></div>
</div>
```

*/

/* Orbits layout */
.orbit-0 {
  --o-orbit-number: 0.01;
}
@for $i from 1 through $max-orbits {
    :nth-child(#{$i} of .orbit), .orbit-#{$i} {
    --o-orbit-number: #{$i};
    }
}

/* Satellites, sectors, label, segment, and spokes layout */
@for $i from 1 through $max-orbiters {
 :nth-child(#{$i} of .segment){
    --o-orbit-child-number: #{$i - 2}; // Uses - 1 to start from 0 deg.
    }
}

@for $i from 1 through $max-orbiters {
  :nth-child(#{$i} of .satellite),:nth-child(#{$i} of o-sector), :nth-child(#{$i} of .spoke) ,:nth-child(#{$i} of o-label) {
    --o-orbit-child-number: #{$i - 1}; // Uses - 1 to start from 0 deg.
    }
}

@for $i from 1 through $max-orbiters {
    .orbit:has(> :nth-child(#{$i} of .satellite), > :nth-child(#{$i} of o-sector), > :nth-child(#{$i} of .spoke), > :nth-child(#{$i} of .segment), > :nth-child(#{$i} of o-label)), 
    [class*='orbit-']:not(.orbit-zone):has(> :nth-child(#{$i} of .satellite), > :nth-child(#{$i} of o-sector), > :nth-child(#{$i} of .spoke), > :nth-child(#{$i} of .segment), > :nth-child(#{$i} of o-label)) {
    --o-angle: calc(var(--o-range) / (#{$i} - var(--o-fit-range, 0)));
    }
}

@for $i from 1 through $max-orbiters {
  .orbit:has(> :nth-child(#{$i} of .segment)), 
  [class*='orbit-']:not(.orbit-zone):has(> :nth-child(#{$i} of .segment)) {
  --o-angle: calc(var(--o-range) / #{$i });
  }
}

